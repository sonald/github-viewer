/*jshint node:true*/

'use strict';

var GithubApi = require('github');
var github = new GithubApi({
    version: '3.0.0'
});

var debug = (function() {
    if (process.env.DEBUG) {
        return function() {
            var util = require('util');

            var msg = [].slice.apply(arguments).reduce(function(acc, item) {
                item = typeof item === 'string'? item: util.inspect(item, true, 5);
                return acc + ' ' + item;
            });

            console.log(msg);
        };
    } else {
        return function() {};
    }
}());

function _endsWith(haystack, needle) {
    var idx = haystack.indexOf(needle);
    return idx > -1 && idx + needle.length === haystack.length;
}

var dataApi = github.getGitdataApi();

function Repo(user, name) {
    this.user = user;
    this.name = name;
}

module.exports.Repo = Repo;

var GitData = (function() {
    var reRef = /^\w+(?:\/\w+)+$/;
    var reSha = /^[a-zA-Z0-9]{6,40}$/;

    function getRefs(callback) {
        var ref_list = null;
        var self = this;

        dataApi.getAllReferences({
            user: self.user,
            repo: self.name
        }, function(err, data) {
            ref_list = data.map(function(ref) { return ref.ref; });
            debug(ref_list);
            callback(err, data);
        });
    }

    function getRef(ref, callback) {
        dataApi.getReference({
            user: this.user,
            repo: this.name,
            ref: ref
        }, function(err, data) {
            debug(data);
            callback(err, data);
        });
    }

    function getCommit(obj, callback) {
        console.log('arg: ', obj);
        var self = this;

        function proxy() {
            dataApi.getCommit({
                'user': self.user,
                'repo': self.name,
                'sha': sha1
            }, function(err, data) {
                debug(data);
                callback(err, data);
            });
        }

        var sha1 = obj;

        if (typeof obj !== 'string') {
            debug('argument type error');
            callback('invalid arg');
            return;
        }

        // fast test with reRef
        if (reRef.test(sha1)) {
            this.getRef(sha1, function(err, data) {
                sha1 = data.object.sha;
                proxy();
            });

        } else {
            this.getRefs(function(err, refs) {
                refs.forEach(function(ref) {
                    if (_endsWith(ref.ref, sha1)) {
                        sha1 = ref.object.sha;
                    }
                });

                proxy();
            });
        }
    }

    /*
     * get all commits of branch `ref`, if there are merges, only choose
     * first parent.
     */
    function getBranchCommits(ref, callback) {
        var self = this;
        var commits = [];

        function done() {
            callback(null, commits);
        }

        function getParentCommit(sha, done) {
            self.getCommit(sha, function(err, tip) {
                if (err) {
                    callback(err);
                    return;
                }

                commits.push(tip);
                if (tip.parents && tip.parents.length > 0) {
                    getParentCommit(tip.parents[0].sha, done);
                } else {
                    done();
                }
            });
        }

        getParentCommit(ref, done);
    }

    function getFileHierachy(ref, callback) {
        var self = this;

        this.getCommit(ref, function(err, commitobj) {
            dataApi.getTree({
                'user': self.user,
                'repo': self.name,
                'sha': commitobj.tree.sha
            }, function(err, data) {
                debug(data);
                callback(err, data);
            });
        });
    }

    function getBlob(sha, callback) {
        var self = this;

        dataApi.getBlob({
            'user': self.user,
            'repo': self.name,
            'sha': sha
        }, function(err, code) {
            debug(code);
            callback(err, code.content);
        });
    }

    return function() {
        this.getRefs = getRefs;
        this.getRef = getRef;
        this.getBranchCommits = getBranchCommits;
        this.getCommit = getCommit;
        this.getFileHierachy = getFileHierachy;
        this.getBlob = getBlob;
        return this;
    };
})();

GitData.call(Repo.prototype);
